package com.Overkill10117.command.commands.Events;

import com.Overkill10117.Config;
import com.Overkill10117.command.commands.currency.BalanceCommand;
import com.Overkill10117.command.commands.currency.Data;
import com.Overkill10117.command.commands.currency.Levels.LevelPointManager;
import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.Permission;
import net.dv8tion.jda.api.entities.Emoji;
import net.dv8tion.jda.api.entities.User;
import net.dv8tion.jda.api.events.interaction.ButtonClickEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.interactions.components.ActionRow;
import net.dv8tion.jda.api.interactions.components.Button;
import org.jetbrains.annotations.NotNull;

import java.awt.*;
import java.io.ByteArrayOutputStream;
import java.util.Objects;

public class OnButtonClick extends ListenerAdapter {
    @Override
    public void onButtonClick(@NotNull ButtonClickEvent event) {
        // users can spoof this id so be careful what you do with this
        String[] id = event.getComponentId().split(":"); // this is the custom id we specified in our button
        String authorId = id[0];
        EmbedBuilder embedBuilder = new EmbedBuilder();

        if (id.length == 1) {
            return;
        }

        String type = id[1];
        // When storing state like this is it is highly recommended to do some kind of verification that it was generated by you, for instance a signature or local cache

        if (!authorId.equals("0000") && !authorId.equals(event.getUser().getId())) {
            System.out.println("oof");
            return;
        }

        boolean disableOrEnable = false;
        try {
            disableOrEnable = !event.getMember().hasPermission(Permission.MANAGE_SERVER) && !event.getMember().getRoles().contains(event.getGuild().getRoleById(888627140046749697L));
        } catch (Exception ignored) {
        }

        switch (type) {
            case "end":
                event.getMessage().delete().queue();
                break;
            case "general":
                String prefix = Config.get("prefix");
                event.getMessage().delete().queue();
                event.getChannel().sendMessageEmbeds(
                        embedBuilder
                        .setTitle("General Commands :thumbsup:")
                .setColor(Color.ORANGE)
                                .addField(Config.get("prefix") + "help :information_source: ", "help command", true)
                                .addField(Config.get("prefix") + "invite :robot: ", "Invite the bot to your server NOW!!", true)

                .setFooter("Type " + prefix + " help [command name] to see what they do")
                        .build()).setActionRows(
                        ActionRow.of(
                                Button.secondary(event.getMember().getUser().getId() + ":general", "General").withEmoji(Emoji.fromEmote("general", Long.parseLong("862895295239028756"), true)),
                                Button.secondary(event.getMember().getUser().getId() + ":music", "Music").withEmoji(Emoji.fromEmote("music", Long.parseLong("862895295239028756"), true)),
                                Button.secondary(event.getMember().getUser().getId() + ":fun", "Fun").withEmoji(Emoji.fromEmote("fun", Long.parseLong("862895295239028756"), true)),
                                Button.secondary(event.getMember().getUser().getId() + ":mod", "Mod").withDisabled(disableOrEnable).withEmoji(Emoji.fromEmote("mod", Long.parseLong("862895295239028756"), true)),
                                Button.secondary(event.getMember().getUser().getId() + ":end", "Cancel").withEmoji(Emoji.fromEmote("end", Long.parseLong("862895295239028756"), true)))).queue();
                break;
            case "music":
                event.getMessage().delete().queue();
                event.getChannel().sendMessageEmbeds(
                        embedBuilder
                                .setTitle("Music Commands :notes:")
                                .setColor(Color.ORANGE)
                                .addField(Config.get("prefix") + "join :inbox_tray: ", "Puts the bot in a voice channel", true)
                                .addField(Config.get("prefix") + "leave :outbox_tray: ", "leaves the current voice channel", true)
                                .addField(Config.get("prefix") + "nowplaying :arrow_forward: ", "Shows the currently playing song", true)
                                .addField(Config.get("prefix") + "play :loud_sound: ", "Plays a song\n" +
                                        "Usage: `,play <youtube link or song name>`", true)
                                .addField(Config.get("prefix") + "queue :scroll: ", "shows the queued up songs", true)
                                .addField(Config.get("prefix") + "repeat :repeat: ", "Loops the current song", true)
                                .addField(Config.get("prefix") + "skip :track_next: ", "skips the current track", true)
                                .addField(Config.get("prefix") + "stop :x: ", "Stops the current song and clears the queue", true)


                                .setFooter("Type " + Config.get("prefix") + " help [command name] to see what they do")
                                .build()).setActionRows(
                        ActionRow.of(
                                Button.secondary(event.getMember().getUser().getId() + ":general", "General").withEmoji(Emoji.fromEmote("general", Long.parseLong("862895295239028756"), true)),
                                Button.secondary(event.getMember().getUser().getId() + ":music", "Music").withEmoji(Emoji.fromEmote("music", Long.parseLong("862895295239028756"), true)),
                                Button.secondary(event.getMember().getUser().getId() + ":fun", "Fun").withEmoji(Emoji.fromEmote("fun", Long.parseLong("862895295239028756"), true)),
                                Button.secondary(event.getMember().getUser().getId() + ":mod", "Mod").withDisabled(disableOrEnable).withEmoji(Emoji.fromEmote("mod", Long.parseLong("862895295239028756"), true)),
                                Button.secondary(event.getMember().getUser().getId() + ":end", "Cancel").withEmoji(Emoji.fromEmote("end", Long.parseLong("862895295239028756"), true)))).queue();
                break;
            case "fun":
                event.getMessage().delete().queue();
                event.getChannel().sendMessageEmbeds(
                        embedBuilder
                                .setTitle("Fun Commands")
                                .setColor(Color.ORANGE)
                                .addField(Config.get("prefix") + "meme :joy:", "Shows a random meme", true)
                                .addField(Config.get("prefix") + "joke :rofl: ", "Shows a random joke", true)
                                .addField(Config.get("prefix") + "spam :scream: ", "spam", true)
                                .addField(Config.get("prefix") + "trivia :thinking:", "a trivia message!!!\n" +
                                        "Usage: `" + Config.get("prefix") + "trivia`", true)
                                .addField(Config.get("prefix") + "8ball :8ball: ", "8ball [question]", true)
                                .addField(Config.get("prefix") + "autospam :scream_cat: ", "autospam automatically spams on the amount of spams\n" +
                                        "Usage: ,autospam [number] [word]", true)
                                .addField(Config.get("prefix") + "targetspam  :scream: :scream_cat:", "Targets the mentioned user on the dm" +
                                        "Usage: `" + Config.get("prefix") + "targetspam`\n"
                                        + "Parameter: `-h | [Number] @Mention(s)`\n"
                                        + "[Number]: Spam an amount of spams.\n"
                                        + "@Mention(s): Spam spams to mentioned member(s) in dm.\n", true)
                                .addField(Config.get("prefix") + "fight :punch: ", "Fights with user\n" +
                                        "Usage: ,fight [person]", true)


                                .setFooter("Type " + Config.get("prefix") + " help [command name] to see what they do")
                                .build()).setActionRows(
                        ActionRow.of(
                                Button.secondary(event.getMember().getUser().getId() + ":general", "General").withEmoji(Emoji.fromEmote("general", Long.parseLong("862895295239028756"), true)),
                                Button.secondary(event.getMember().getUser().getId() + ":music", "Music").withEmoji(Emoji.fromEmote("music", Long.parseLong("862895295239028756"), true)),
                                Button.secondary(event.getMember().getUser().getId() + ":fun", "Fun").withEmoji(Emoji.fromEmote("fun", Long.parseLong("862895295239028756"), true)),
                                Button.secondary(event.getMember().getUser().getId() + ":mod", "Mod").withDisabled(disableOrEnable).withEmoji(Emoji.fromEmote("mod", Long.parseLong("862895295239028756"), true)),
                                Button.secondary(event.getMember().getUser().getId() + ":end", "Cancel").withEmoji(Emoji.fromEmote("end", Long.parseLong("862895295239028756"), true)))).queue();
                break;
            case "mod":
                event.getMessage().delete().queue();
                event.getChannel().sendMessageEmbeds(
                        embedBuilder
                                .setTitle("Moderation Commands")
                                .setColor(Color.ORANGE)
                                .addField(Config.get("prefix") + "about :information_source: ", "About the bot", true)
                                .addField(Config.get("prefix") + "avatar :information_source: ", "giveaway help", true)
                                .addField(Config.get("prefix") + "serverinfo :information_source: ", "Shows info about that server\n" +
                                        "Usage: `,serverinfo`\n" +
                                        "Parameter: `-h | [ID] | null`", true)
                                .addField(Config.get("prefix") + "user :information_source: ", "Get info about the specified user\n" +
                                        "`,user [mentioned member]`", true)
                                .addField(Config.get("prefix") + "mods :information_source: ", "This command is for getting a list of mods in this server."
                                        + "Command Usage: `,mods`\n", true)

                                .setFooter("Type " + Config.get("prefix") + " help [command name] to see what they do")
                                .build()).setActionRows(
                        ActionRow.of(
                                Button.secondary(event.getMember().getUser().getId() + ":general", "General").withEmoji(Emoji.fromEmote("general", Long.parseLong("862895295239028756"), true)),
                                Button.secondary(event.getMember().getUser().getId() + ":music", "Music").withEmoji(Emoji.fromEmote("music", Long.parseLong("862895295239028756"), true)),
                                Button.secondary(event.getMember().getUser().getId() + ":fun", "Fun").withEmoji(Emoji.fromEmote("fun", Long.parseLong("862895295239028756"), true)),
                                Button.secondary(event.getMember().getUser().getId() + ":mod", "Mod").withDisabled(disableOrEnable).withEmoji(Emoji.fromEmote("mod", Long.parseLong("862895295239028756"), true)),
                                Button.secondary(event.getMember().getUser().getId() + ":end", "Cancel").withEmoji(Emoji.fromEmote("end", Long.parseLong("862895295239028756"), true)))).queue();
                break;
            case "rank":
                try{
                    User member = event.getJDA().getUserById(id[2]);
                    ByteArrayOutputStream baos = LevelPointManager.getLevelPointCard(member).getByteArrayOutputStream();
                    event.getMessage().delete().queue();
                    event.getChannel().sendFile(baos.toByteArray(), member.getName() + "-stats.png").queue();
                }
                catch(Exception ignored){
                }
                break;
            case "accept":
                String arrow = "<a:arrow_1:862525611465113640>";

                event.getMessage().delete().queue();
                EmbedBuilder em = new EmbedBuilder().setTitle("Stored data").setFooter("Press the Accept button if you accept the data that will be stored!\n");
                em.setDescription("The bot stores the following data:\n" +
                        arrow + " Reads all sent messages in the server the bot is in.\n" +
                        arrow + " Reads all the messages you sent to the bot.\n" +
                        arrow + " Reads your ignite coins.\n" +
                        arrow + " Reads your user name, profile picture, nitro status, and user id.\n" +
                        arrow + " Reads all the permissions you have on that server.");
                event.getChannel().sendMessageEmbeds(em.build()).setActionRow(
                        Button.primary("0000:yes", "yes").withEmoji(Emoji.fromEmote("verify", Long.parseLong("863204252188672000"), true))
                ).queue();
                event.deferEdit().queue();
                break;
            case "yes":
                event.getMessage().delete().queue();
                event.getChannel().sendMessage("<a:thanks:863989523461177394> Thank you for accepting the rules and data that will be stored.").queue();
                event.getChannel().sendMessage("<a:question:863989523368247346> For your Ignite Coins balance, may we ask for your first and last, real name? For example, **Nathan Tan** or **John Sy**").queue();
                Data.progress.put(event.getUser(), 1);
                break;
            case "balance":
                Integer balance = BalanceCommand.dataInTheSky.get(event.getUser().getIdLong());
                event.reply("Your balance is **" + balance + "**").setEphemeral(true).queue();
                BalanceCommand.dataInTheSky.remove(event.getUser().getIdLong());
                event.getMessage().editMessageEmbeds(event.getMessage().getEmbeds().get(0)).setActionRow(event.getButton().asDisabled()).queue();
                break;
            case "again":
                event.getChannel().sendMessage("spam").setActionRows(
                        ActionRow.of(
                                Button.secondary(event.getMember().getUser().getId() + ":again", "spam again").withEmoji(Emoji.fromEmote("spam", Long.parseLong("862895295239028756"), true))
                        )
                ).queue();
        }
    }
    }



